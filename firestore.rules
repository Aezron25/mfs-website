/**
 * @fileOverview Firestore Security Rules for Mwanakombo Financial Services.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for client profiles and messages, with role-based access control for administrators.
 *
 * Data Structure:
 * - /client_profiles/{clientProfileId}: Stores client profile data, accessible only to the user with the matching UID.
 * - /client_profiles/{clientProfileId}/messages/{messageId}: Stores messages sent by a client. Each message includes a denormalized 'clientProfileId' field for authorization.
 * - /roles_admin/{adminProfileId}: Presence of a document in this collection grants admin privileges.
 *
 * Key Security Decisions:
 * - Client profiles are private and only accessible to the owning user.
 * - Messages are owned by the client who created them and are stored in a subcollection under their profile.
 * - Admin privileges are granted by the existence of a document in the `/roles_admin` collection.
 * - No user listing is allowed for `client_profiles` or `roles_admin`. Only the authenticated user can access their own profile or check for their admin status.
 *
 * Denormalization for Authorization:
 * - The `messages` subcollection includes the `clientProfileId`, which eliminates the need for `get()` calls to the parent `client_profiles` document. Security rules can directly verify ownership based on `request.auth.uid` and the `clientProfileId` within the message.
 *
 * Structural Segregation:
 * - Client profiles and admin profiles are stored in separate collections to clearly segregate client and admin data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows clients to manage their own profile.
     * @path /client_profiles/{clientProfileId}
     * @allow (create) - User with UID 'user_abc' can create their profile with clientProfileId = 'user_abc'.
     * @allow (get) - User with UID 'user_abc' can get their own profile.
     * @allow (update) - User with UID 'user_abc' can update their own profile.
     * @allow (delete) - User with UID 'user_abc' can delete their own profile.
     * @deny (create) - User with UID 'user_xyz' cannot create a profile with clientProfileId = 'user_abc'.
     * @deny (get) - User with UID 'user_xyz' cannot get profile with clientProfileId = 'user_abc'.
     * @deny (update) - User with UID 'user_xyz' cannot update profile with clientProfileId = 'user_abc'.
     * @deny (delete) - User with UID 'user_xyz' cannot delete profile with clientProfileId = 'user_abc'.
     * @principle Enforces document ownership for all operations.
     */
    match /client_profiles/{clientProfileId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is the owner of the document
      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      // Helper function to check if the user is the owner of the existing document
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Read permissions
      allow get: if isOwner(clientProfileId);
      allow list: if false;

      // Write permissions
      allow create: if isOwner(clientProfileId) && request.resource.data.id == clientProfileId;
      allow update: if isExistingOwner(clientProfileId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(clientProfileId);
    }

    /**
     * @description Allows clients to manage their own messages.
     * @path /client_profiles/{clientProfileId}/messages/{messageId}
     * @allow (create) - User with UID 'user_abc' can create a message under their profile (clientProfileId = 'user_abc').
     * @allow (get) - User with UID 'user_abc' can get a message under their profile.
     * @allow (update) - User with UID 'user_abc' can update a message under their profile.
     * @allow (delete) - User with UID 'user_abc' can delete a message under their profile.
     * @deny (create) - User with UID 'user_xyz' cannot create a message under profile 'user_abc'.
     * @deny (get) - User with UID 'user_xyz' cannot get a message under profile 'user_abc'.
     * @deny (update) - User with UID 'user_xyz' cannot update a message under profile 'user_abc'.
     * @deny (delete) - User with UID 'user_xyz' cannot delete a message under profile 'user_abc'.
     * @principle Enforces document ownership for all operations on messages.
     */
    match /client_profiles/{clientProfileId}/messages/{messageId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is the owner of the message
      function isOwner(clientProfileId) {
        return isSignedIn() && request.auth.uid == clientProfileId;
      }

      // Helper function to check if the user is the owner of the existing document
      function isExistingOwner(clientProfileId) {
        return isOwner(clientProfileId) && resource != null;
      }

      // Read permissions
      allow get: if isOwner(clientProfileId);
      allow list: if isOwner(clientProfileId);

      // Write permissions
      allow create: if isOwner(clientProfileId) && request.resource.data.clientProfileId == clientProfileId;
      allow update: if isExistingOwner(clientProfileId) && request.resource.data.clientProfileId == resource.data.clientProfileId;
      allow delete: if isExistingOwner(clientProfileId);
    }

    /**
     * @description Controls access to admin profiles. Only the admin themselves can read their profile.
     * @path /roles_admin/{adminProfileId}
     * @allow (create) - User with UID 'admin_abc' can create their admin profile.
     * @allow (get) - User with UID 'admin_abc' can read their admin profile.
     * @allow (update) - User with UID 'admin_abc' can update their admin profile.
     * @allow (delete) - User with UID 'admin_abc' can delete their admin profile.
     * @deny (create) - User with UID 'user_xyz' cannot create an admin profile for 'admin_abc'.
     * @deny (get) - User with UID 'user_xyz' cannot read the admin profile for 'admin_abc'.
     * @deny (update) - User with UID 'user_xyz' cannot update the admin profile for 'admin_abc'.
     * @deny (delete) - User with UID 'user_xyz' cannot delete the admin profile for 'admin_abc'.
     * @principle Enforces ownership for admin profiles.
     */
    match /roles_admin/{adminProfileId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is the owner of the document
      function isOwner(adminId) {
        return isSignedIn() && request.auth.uid == adminId;
      }

      // Helper function to check if the user is the owner of the existing document
      function isExistingOwner(adminId) {
        return isOwner(adminId) && resource != null;
      }

      // Read permissions
      allow get: if isOwner(adminProfileId);
      allow list: if false;

      // Write permissions
      allow create: if isOwner(adminProfileId) && request.resource.data.id == adminProfileId;
      allow update: if isExistingOwner(adminProfileId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(adminProfileId);
    }
  }
}