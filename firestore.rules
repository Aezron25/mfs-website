/**
 * @file Firebase Security Rules for Mwanakombo Financial Services.
 *
 * @corePhilosophy This ruleset enforces a strict user-ownership model for client profiles and messages,
 *                 and utilizes document existence in a specific collection to grant admin privileges.
 *
 * @dataStructure The data is structured hierarchically:
 *                 - /client_profiles/{clientProfileId}: Client profile information, accessible only by the owner.
 *                 - /client_profiles/{clientProfileId}/messages/{messageId}: Messages sent by the client, also owner-only.
 *                 - /roles_admin/{adminProfileId}: Admin role assignments. Document existence grants admin privileges.
 *
 * @keySecurityDecisions - Listing client profiles is denied to prevent unauthorized access to user data.
 *                       - Admin privileges are determined solely by the presence of a document in the /roles_admin collection.
 *                       - Data validation is limited to ownership checks and relational integrity for essential fields.
 *
 * @denormalizationForAuthorization The 'clientProfileId' is denormalized within each message to enable independent
 *                                 authorization without requiring additional `get()` calls to the parent `client_profiles` document.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects client profile data, allowing only the owner to read and write.
     * @path /client_profiles/{clientProfileId}
     * @allow (create) User 'dYOUV7Is5mciNd4bKjjUwI7hzZJ3' can create a profile if clientProfileId == auth.uid.
     * @allow (get) User 'dYOUV7Is5mciNd4bKjjUwI7hzZJ3' can get their own profile.
     * @deny (create) User 'Eve' cannot create a profile for user 'Bob'.
     * @deny (get) User 'Eve' cannot get user 'Bob's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /client_profiles/{clientProfileId} {
      // Read operations
      allow get: if isOwner(clientProfileId);
      allow list: if false;

      // Write operations
      allow create: if isOwner(clientProfileId);
      allow update: if isExistingOwner(clientProfileId);
      allow delete: if isExistingOwner(clientProfileId);
    }

    /**
     * @description Protects messages sent by clients, allowing only the owner to read and write.
     * @path /client_profiles/{clientProfileId}/messages/{messageId}
     * @allow (create) User 'dYOUV7Is5mciNd4bKjjUwI7hzZJ3' can create a message if clientProfileId matches auth.uid.
     * @allow (get) User 'dYOUV7Is5mciNd4bKjjUwI7hzZJ3' can get their own message.
     * @deny (create) User 'Eve' cannot create a message for user 'Bob'.
     * @deny (get) User 'Eve' cannot get user 'Bob's message.
     * @principle Enforces document ownership and relational integrity for all operations.
     */
    match /client_profiles/{clientProfileId}/messages/{messageId} {
      // Read operations
      allow get: if isOwner(clientProfileId);
      allow list: if isOwner(clientProfileId);

      // Write operations
      allow create: if isOwner(clientProfileId);
      allow update: if isExistingOwner(clientProfileId);
      allow delete: if isExistingOwner(clientProfileId);
    }

    /**
     * @description Manages admin roles based on document existence.
     * @path /roles_admin/{adminProfileId}
     * @allow (create) Only an existing admin can create another admin profile.
     * @allow (get) Only an existing admin can read another admin profile.
     * @deny (create) A non-admin user cannot create an admin profile.
     * @deny (get) A non-admin user cannot read an admin profile.
     * @principle Grants admin privileges based on document existence.
     */
    match /roles_admin/{adminProfileId} {
      // Read operations
      allow get: if isAdmin();
      allow list: if false;

      // Write operations
      allow create: if isAdmin();
      allow update: if false;
      allow delete: if isAdmin();
    }

    //---------------------------------------------------------------------------------------------
    // Helper functions
    //---------------------------------------------------------------------------------------------

    /**
     * @description Checks if the user is signed in.
     * @return True if the user is authenticated, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource.
     * @param userId The user ID to compare against the authenticated user's ID.
     * @return True if the authenticated user's ID matches the provided userId, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource and the resource exists.
     * @param userId The user ID to compare against the authenticated user's ID.
     * @return True if the authenticated user's ID matches the provided userId and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the authenticated user has admin privileges.
     * @return True if the user has admin privileges, false otherwise.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }
  }
}