/**
 * @file Overview
 * This ruleset enforces a strict user-ownership model for client profiles and their messages,
 * with role-based access control for administrators.  It prioritizes security and
 * authorization independence to prevent costly `get()` calls.
 *
 * Data Structure:
 * - /client_profiles/{clientProfileId}: Stores client profile data, accessible only to the
 *   authenticated user with a matching UID.
 * - /client_profiles/{clientProfileId}/messages/{messageId}: Stores messages sent by a client.
 *   Each message includes a denormalized 'clientProfileId' for authorization.
 * - /roles_admin/{adminProfileId}: Presence of a document grants admin privileges to the user.
 *
 * Key Security Decisions:
 * - Users can only access their own client profiles.
 * - Users can only manage messages associated with their own profile.
 * - Admin privileges are granted by the presence of a document in the `/roles_admin` collection.
 * - Listing all client profiles is disallowed, to protect user privacy.
 *
 * Denormalization for Authorization:
 * - Messages include the `clientProfileId` to allow direct verification of ownership without
 *   requiring a `get()` call to the parent `client_profiles` document.
 *
 * Structural Segregation:
 * - Client messages are stored in a subcollection under their respective client profiles,
 *   ensuring secure `list` operations and clear ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows clients to manage their own profile.
     * @path /client_profiles/{clientProfileId}
     * @allow (create) - User with UID 'dYOUV7Is5mciNd4bKjjUwI7hzZJ3' can create a profile where clientProfileId matches their UID.
     * @allow (get) - User with UID 'dYOUV7Is5mciNd4bKjjUwI7hzZJ3' can get their own profile.
     * @allow (update) - User with UID 'dYOUV7Is5mciNd4bKjjUwI7hzZJ3' can update their own profile.
     * @allow (delete) - User with UID 'dYOUV7Is5mciNd4bKjjUwI7hzZJ3' can delete their own profile.
     * @deny (create) - User with UID 'dXYZ...' cannot create a profile with clientProfileId 'dYOUV7Is5mciNd4bKjjUwI7hzZJ3'.
     * @deny (get) - User with UID 'dXYZ...' cannot get the profile of user 'dYOUV7Is5mciNd4bKjjUwI7hzZJ3'.
     * @deny (update) - User with UID 'dXYZ...' cannot update the profile of user 'dYOUV7Is5mciNd4bKjjUwI7hzZJ3'.
     * @deny (delete) - User with UID 'dXYZ...' cannot delete the profile of user 'dYOUV7Is5mciNd4bKjjUwI7hzZJ3'.
     * @principle Enforces document ownership for all operations.
     */
    match /client_profiles/{clientProfileId} {
      allow get: if isOwner(clientProfileId);
      allow list: if false; // Listing client profiles is disallowed.
      allow create: if isSignedIn() && isNewOwner(clientProfileId);
      allow update: if isExistingOwner(clientProfileId);
      allow delete: if isExistingOwner(clientProfileId);
    }

    /**
     * @description Allows clients to manage their own messages.
     * @path /client_profiles/{clientProfileId}/messages/{messageId}
     * @allow (create) - User with UID 'dYOUV7Is5mciNd4bKjjUwI7hzZJ3' can create a message under their profile.
     * @allow (get) - User with UID 'dYOUV7Is5mciNd4bKjjUwI7hzZJ3' can get a message under their profile.
     * @allow (update) - User with UID 'dYOUV7Is5mciNd4bKjjUwI7hzZJ3' can update a message under their profile.
     * @allow (delete) - User with UID 'dYOUV7Is5mciNd4bKjjUwI7hzZJ3' can delete a message under their profile.
     * @deny (create) - User with UID 'dXYZ...' cannot create a message under the profile of 'dYOUV7Is5mciNd4bKjjUwI7hzZJ3'.
     * @deny (get) - User with UID 'dXYZ...' cannot get a message under the profile of 'dYOUV7Is5mciNd4bKjjUwI7hzZJ3'.
     * @deny (update) - User with UID 'dXYZ...' cannot update a message under the profile of 'dYOUV7Is5mciNd4bKjjUwI7hzZJ3'.
     * @deny (delete) - User with UID 'dXYZ...' cannot delete a message under the profile of 'dYOUV7Is5mciNd4bKjjUwI7hzZJ3'.
     * @principle Enforces document ownership for all operations on messages.
     */
    match /client_profiles/{clientProfileId}/messages/{messageId} {
      allow get: if isOwner(clientProfileId);
      allow list: if isOwner(clientProfileId);
      allow create: if isSignedIn() && request.resource.data.clientProfileId == clientProfileId;
      allow update: if isExistingOwner(clientProfileId) && resource.data.clientProfileId == clientProfileId;
      allow delete: if isExistingOwner(clientProfileId) && resource.data.clientProfileId == clientProfileId;
    }

    /**
     * @description Grants admin privileges based on document existence.
     * @path /roles_admin/{adminProfileId}
     * @allow (create) - User with UID 'dYOUV7Is5mciNd4bKjjUwI7hzZJ3' can create their admin profile.
     * @allow (get) - User with UID 'dYOUV7Is5mciNd4bKjjUwI7hzZJ3' can get their admin profile.
     * @allow (update) - User with UID 'dYOUV7Is5mciNd4bKjjUwI7hzZJ3' can update their admin profile.
     * @allow (delete) - User with UID 'dYOUV7Is5mciNd4bKjjUwI7hzZJ3' can delete their admin profile.
     * @deny (create) - User with UID 'dXYZ...' cannot create an admin profile with ID 'dYOUV7Is5mciNd4bKjjUwI7hzZJ3'.
     * @deny (get) - User with UID 'dXYZ...' cannot get the admin profile of user 'dYOUV7Is5mciNd4bKjjUwI7hzZJ3'.
     * @deny (update) - User with UID 'dXYZ...' cannot update the admin profile of user 'dYOUV7Is5mciNd4bKjjUwI7hzZJ3'.
     * @deny (delete) - User with UID 'dXYZ...' cannot delete the admin profile of user 'dYOUV7Is5mciNd4bKjjUwI7hzZJ3'.
     * @principle Role-based access control.
     */
    match /roles_admin/{adminProfileId} {
      allow get: if isAdmin(adminProfileId);
      allow list: if false;
      allow create: if isAdmin(adminProfileId);
      allow update: if isAdmin(adminProfileId);
      allow delete: if isAdmin(adminProfileId);
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isNewOwner(userId) {
    return isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
  }

    function isExistingOwner(userId) {
    return isOwner(userId) && resource != null && resource.data.id == userId;
  }

  function isAdmin(adminProfileId) {
    return isSignedIn() && request.auth.uid == adminProfileId;
  }
}