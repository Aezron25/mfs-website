/**
 * @file Firestore Security Rules for Mwanakombo Financial Services.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for client profiles and messages,
 * and utilizes role-based access control for administrative privileges. All data access
 * is predicated on a verified Firebase Authentication UID.
 *
 * Data Structure:
 * - /client_profiles/{clientProfileId}: Stores client profile data, accessible only to the owner.
 * - /client_profiles/{clientProfileId}/messages/{messageId}: Stores messages sent by clients, accessible only to the owner.
 * - /roles_admin/{adminProfileId}: Admin role assignment; existence of a document grants admin privileges.
 *
 * Key Security Decisions:
 * - User data is strictly segregated and accessible only to the authenticated owner.
 * - Admin privileges are granted based on the existence of a document in the `/roles_admin` collection.
 * - Denormalization is used to embed ownership information within the messages subcollection
 *   to avoid costly `get()` calls during authorization checks.
 * - List operations are secured by scoping messages under the owning user's profile.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure client profile data, accessible only to the authenticated owner.
     * @path /client_profiles/{clientProfileId}
     * @allow (create) - Authenticated user creates their own profile with matching UID.
     * @allow (get, update, delete) - Authenticated user accesses their own profile with matching UID.
     * @deny (create) - User attempts to create a profile with an ID that doesn't match their UID.
     * @deny (get, update, delete) - User attempts to access a profile that doesn't belong to them.
     * @principle Enforces document ownership for all operations.
     */
    match /client_profiles/{clientProfileId} {
      // Utility function
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(clientProfileId) {
        return request.auth.uid == clientProfileId;
      }

      allow get: if isSignedIn() && isOwner(clientProfileId);
      allow list: if false; // Client profiles should not be listable.
      allow create: if isSignedIn() && isOwner(clientProfileId) && request.resource.data.id == request.auth.uid;
      allow update: if isSignedIn() && isOwner(clientProfileId);
      allow delete: if isSignedIn() && isOwner(clientProfileId);
    }

    /**
     * @description Secure messages sent by clients, accessible only to the owner.
     * @path /client_profiles/{clientProfileId}/messages/{messageId}
     * @allow (create) - Authenticated user creates a message under their profile.
     * @allow (get, update, delete) - Authenticated user accesses their own message.
     * @allow (list) - Authenticated user lists their own messages.
     * @deny (create) - User attempts to create a message under someone else's profile.
     * @deny (get, update, delete) - User attempts to access a message that doesn't belong to them.
     * @principle Enforces document ownership for all operations.
     */
    match /client_profiles/{clientProfileId}/messages/{messageId} {
      // Utility function
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(clientProfileId) {
        return request.auth.uid == clientProfileId;
      }

      allow get: if isSignedIn() && isOwner(clientProfileId);
      allow list: if isSignedIn() && isOwner(clientProfileId);
      allow create: if isSignedIn() && isOwner(clientProfileId);
      allow update: if isSignedIn() && isOwner(clientProfileId);
      allow delete: if isSignedIn() && isOwner(clientProfileId);
    }

    /**
     * @description Admin role assignment; existence of a document grants admin privileges.
     * @path /roles_admin/{adminProfileId}
     * @allow (get) - Anyone can check if an admin role exists (for UI purposes).
     * @allow (create) - Only a superadmin can create an admin role.  // TODO: Implement superadmin check.
     * @allow (update, delete) - Only the admin themselves or a superadmin can modify/remove their role.  // TODO: Implement superadmin check.
     * @deny (create) - Non-superadmin attempts to create an admin role.
     * @deny (update, delete) - Non-admin or unauthorized user attempts to modify/remove an admin role.
     * @principle Role-based access control.
     */
    match /roles_admin/{adminProfileId} {
      // Utility function
      function isSignedIn() {
        return request.auth != null;
      }

      function isAdmin() {
          return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      allow get: if isSignedIn(); // Anyone can check for admin role existence.
      allow list: if false; // Listing admins is not permitted.
      allow create: if false; // TODO: Implement superadmin check
      allow update: if isSignedIn() && isAdmin(); // TODO: Implement superadmin check and owner check
      allow delete: if isSignedIn() && isAdmin(); // TODO: Implement superadmin check and owner check
    }
  }
}