/**
 * @fileoverview Firestore Security Rules for Mwanakombo Financial Services.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for client profiles and messages,
 * combined with role-based access control for administrators.
 *
 * Data Structure:
 * - /client_profiles/{clientProfileId}: Stores client profile data, accessible only to the owner.
 * - /client_profiles/{clientProfileId}/messages/{messageId}: Stores client messages, accessible only to the owner.
 * - /roles_admin/{adminProfileId}: Documents in this collection grant admin privileges to the corresponding user.
 *
 * Key Security Decisions:
 * - Clients can only access their own profile data and messages.
 * - Administrators, as defined by documents in `/roles_admin/{adminProfileId}`, have elevated privileges (not implemented in this prototype).
 * - Data consistency is enforced between the path and the document's internal `id` field for client profiles.
 *
 * Denormalization for Authorization:
 * - The `clientProfileId` is denormalized within each message document to allow direct authorization checks
 *   without needing to perform additional `get()` operations on the parent `client_profiles` document.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to client profile documents.
     * @path /client_profiles/{clientProfileId}
     * @allow (create) - Authenticated user with UID matching clientProfileId can create their profile.
     * @allow (get, list) - Authenticated user with UID matching clientProfileId can read their profile.
     * @allow (update, delete) - Authenticated user with UID matching clientProfileId can update/delete their profile.
     * @deny (create) - Authenticated user with UID not matching clientProfileId cannot create a profile.
     * @deny (get, list) - Authenticated user with UID not matching clientProfileId cannot read other profiles.
     * @deny (update, delete) - Authenticated user with UID not matching clientProfileId cannot update/delete other profiles.
     * @principle Enforces document ownership based on the clientProfileId path parameter.
     */
    match /client_profiles/{clientProfileId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(clientProfileId);
      allow list: if false;
      allow create: if isOwner(clientProfileId) && request.resource.data.id == clientProfileId;
      allow update: if isExistingOwner(clientProfileId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(clientProfileId);
    }

    /**
     * @description Controls access to messages within a client profile.
     * @path /client_profiles/{clientProfileId}/messages/{messageId}
     * @allow (create) - Authenticated user with UID matching clientProfileId can create a message.
     * @allow (get, list) - Authenticated user with UID matching clientProfileId can read messages in their profile.
     * @allow (update, delete) - Authenticated user with UID matching clientProfileId can update/delete messages in their profile.
     * @deny (create) - Authenticated user with UID not matching clientProfileId cannot create a message.
     * @deny (get, list) - Authenticated user with UID not matching clientProfileId cannot read messages in other profiles.
     * @deny (update, delete) - Authenticated user with UID not matching clientProfileId cannot update/delete messages in other profiles.
     * @principle Enforces document ownership for messages based on the clientProfileId path parameter and the denormalized clientProfileId field within the message document.
     */
    match /client_profiles/{clientProfileId}/messages/{messageId} {
       function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(clientProfileId);
      allow list: if isOwner(clientProfileId);
      allow create: if isOwner(clientProfileId) && request.resource.data.clientProfileId == clientProfileId;
      allow update: if isExistingOwner(clientProfileId) && request.resource.data.clientProfileId == resource.data.clientProfileId;
      allow delete: if isExistingOwner(clientProfileId);
    }

    /**
     * @description Controls access to admin profile documents.
     * @path /roles_admin/{adminProfileId}
     * @allow (create) - Only an existing admin can create another admin profile (Not Implemented).
     * @allow (get, list) - Any authenticated user can check for admin privileges (Not Implemented).
     * @allow (update, delete) - Only an existing admin can update/delete another admin profile (Not Implemented).
     * @deny (create) - Non-admins cannot create admin profiles.
     * @deny (update, delete) - Non-admins cannot update/delete admin profiles.
     * @principle Implements role-based access control. The existence of an AdminProfile document grants admin privileges.
     */
    match /roles_admin/{adminProfileId} {
      function isSignedIn() {
        return request.auth != null;
      }

      //In this prototype, any authenticated user can check for admin privileges but cannot create/update/delete
      allow get, list: if isSignedIn();
      allow create, update, delete: if false; // Only existing admins can modify the admin collection (Not Implemented).
    }
  }
}