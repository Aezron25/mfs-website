/**
 * @fileOverview Firestore Security Rules for Mwanakombo Financial Services.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for client profiles and messages, with role-based access control for administrators.
 *
 * Data Structure:
 * - /client_profiles/{clientProfileId}: Stores client profile data, where {clientProfileId} matches the Firebase Auth UID.
 * - /client_profiles/{clientProfileId}/messages/{messageId}: Stores messages sent by clients, with denormalized clientProfileId for authorization.
 * - /roles_admin/{adminProfileId}: Documents in this collection grant admin privileges, where {adminProfileId} matches the Firebase Auth UID.
 *
 * Key Security Decisions:
 * - Clients can only access their own profile data and messages.
 * - Administrators are identified by the existence of a document in the /roles_admin collection.
 * - Listing of client profiles is disallowed.
 * - The clientProfileId is denormalized within each message to ensure security rules can validate that the authenticated user owns the message.
 * - Admin roles are managed through document existence in `/roles_admin/{uid}`, avoiding custom claims.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to client profile documents.
     * @path /client_profiles/{clientProfileId}
     * @allow (create) - Authenticated user creates their own profile.
     * @allow (get, update, delete) - Authenticated user accesses their own profile.
     * @deny (create) - User attempts to create a profile with an ID that does not match their auth UID.
     * @deny (get, update, delete) - User attempts to access a profile that does not belong to them.
     * @principle Enforces document ownership for reads and writes.
     */
    match /client_profiles/{clientProfileId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(clientProfileId) {
        return request.auth.uid == clientProfileId;
      }

      function isExistingOwner(clientProfileId) {
        return isOwner(clientProfileId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(clientProfileId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(request.auth.uid);
      allow update: if isSignedIn() && isExistingOwner(clientProfileId);
      allow delete: if isSignedIn() && isExistingOwner(clientProfileId);
    }

    /**
     * @description Controls access to messages within a client profile.
     * @path /client_profiles/{clientProfileId}/messages/{messageId}
     * @allow (create, get, list, update, delete) - Authenticated user accesses their own messages.
     * @deny (create, get, list, update, delete) - User attempts to access messages that do not belong to them.
     * @principle Enforces document ownership for reads and writes within a subcollection.
     */
    match /client_profiles/{clientProfileId}/messages/{messageId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(clientProfileId) {
        return request.auth.uid == clientProfileId;
      }

      function isExistingOwner(clientProfileId) {
        return isOwner(clientProfileId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(clientProfileId);
      allow list: if isSignedIn() && isOwner(clientProfileId);
      allow create: if isSignedIn() && isOwner(clientProfileId);
      allow update: if isSignedIn() && isExistingOwner(clientProfileId);
      allow delete: if isSignedIn() && isExistingOwner(clientProfileId);
    }

    /**
     * @description Grants admin privileges based on the existence of a document in this collection.
     * @path /roles_admin/{adminProfileId}
     * @allow (create) - Only an existing admin can create a new admin.  In a real application, this should be further restricted.
     * @allow (get, list, update, delete) - Only the admin themselves can access their profile.
     * @deny (create, get, list, update, delete) - Non-admins cannot create, access, or modify admin profiles.
     * @principle Implements role-based access control through document existence.
     */
    match /roles_admin/{adminProfileId} {
        function isSignedIn() {
            return request.auth != null;
        }

        function isAdmin() {
            return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
        }

        function isOwner(adminProfileId) {
            return request.auth.uid == adminProfileId;
        }

        function isExistingOwner(adminProfileId) {
            return isOwner(adminProfileId) && resource != null;
        }

        allow get: if isSignedIn() && isOwner(adminProfileId);
        allow list: if false;
        allow create: if isSignedIn() && isAdmin() && isOwner(request.auth.uid);
        allow update: if isSignedIn() && isExistingOwner(adminProfileId);
        allow delete: if isSignedIn() && isExistingOwner(adminProfileId);
    }
  }
}