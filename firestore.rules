/**
 * @file Overview
 * This ruleset enforces a strict user-ownership model for client profiles and their messages,
 * and role-based access control for administrators. Data is organized hierarchically under
 * /client_profiles/{clientProfileId} for client data, and /roles_admin/{adminProfileId}
 * for admin roles.
 *
 * Data Structure:
 * - /client_profiles/{clientProfileId}: Client profile information, accessible only to the owner.
 * - /client_profiles/{clientProfileId}/messages/{messageId}: Messages sent by the client,
 *   accessible only to the owner.  Includes the clientProfileId.
 * - /roles_admin/{adminProfileId}: Admin profiles. The existence of a document grants admin privileges.
 *
 * Key Security Decisions:
 * - Clients can only access their own profile data and messages.
 * - Admin privileges are granted by the existence of a document in the `/roles_admin/{adminProfileId}` collection.
 * - Listing client profiles is disallowed for non-admins. Only the current user can access their own profile.
 *
 * Denormalization for Authorization:
 * - The `Message` entity includes a denormalized `clientProfileId` field. This allows security rules to
 *   validate message ownership without needing to perform additional `get()` calls to the parent
 *   `client_profiles` document.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures client profile data, allowing only the owner to read and write.
     * @path /client_profiles/{clientProfileId}
     * @allow (create) - Authenticated user with UID 'dYOUV7Is5mciNd4bKjjUwI7hzZJ3' can create a profile where clientProfileId == 'dYOUV7Is5mciNd4bKjjUwI7hzZJ3'
     * @allow (get, update, delete) - Authenticated user with UID 'dYOUV7Is5mciNd4bKjjUwI7hzZJ3' can get/update/delete their own profile where clientProfileId == 'dYOUV7Is5mciNd4bKjjUwI7hzZJ3'
     * @deny (create) - Authenticated user attempts to create a profile with a clientProfileId that doesn't match their UID.
     * @deny (get, update, delete) - Authenticated user attempts to get/update/delete a profile with a clientProfileId that doesn't match their UID.
     * @principle Enforces document ownership for all operations.
     */
    match /client_profiles/{clientProfileId} {
      allow get: if isOwner(clientProfileId);
      allow list: if false; // Listing client profiles is not allowed for security reasons.

      allow create: if isSignedIn() && isNewOwner(clientProfileId);
      allow update: if isExistingOwner(clientProfileId) && isOwner(clientProfileId);
      allow delete: if isExistingOwner(clientProfileId) && isOwner(clientProfileId);
    }

    /**
     * @description Secures messages sent by a client, allowing only the owner to read and write.
     * @path /client_profiles/{clientProfileId}/messages/{messageId}
     * @allow (create) - Authenticated user with UID 'dYOUV7Is5mciNd4bKjjUwI7hzZJ3' can create a message under their profile where clientProfileId matches their UID.
     * @allow (get, list, update, delete) - Authenticated user with UID 'dYOUV7Is5mciNd4bKjjUwI7hzZJ3' can get/list/update/delete messages under their own profile.
     * @deny (create) - Authenticated user attempts to create a message under a profile that doesn't match their UID.
     * @deny (get, list, update, delete) - Authenticated user attempts to get/list/update/delete messages under a profile that doesn't match their UID.
     * @principle Enforces document ownership and data consistency for all operations.
     */
    match /client_profiles/{clientProfileId}/messages/{messageId} {
      allow get: if isOwner(clientProfileId);
      allow list: if isOwner(clientProfileId);

      allow create: if isSignedIn() && request.resource.data.clientProfileId == clientProfileId;
      allow update: if isExistingOwner(clientProfileId) && isOwner(clientProfileId) && resource.data.clientProfileId == clientProfileId;
      allow delete: if isExistingOwner(clientProfileId) && isOwner(clientProfileId) && resource.data.clientProfileId == clientProfileId;
    }

    /**
     * @description Grants admin privileges based on the existence of a document in this collection.
     * @path /roles_admin/{adminProfileId}
     * @allow (get, list, create, update, delete) - Only authenticated users can manage admin roles.  Admin rights are derived from the existence of the profile document
     * @principle Role-based access control using document existence.
     */
    match /roles_admin/{adminProfileId} {
      allow get: if isSignedIn();
      allow list: if false; //  Listing admin profiles is not allowed

      allow create: if isSignedIn();
      allow update: if false; // Updating admin profiles is not allowed
      allow delete: if false; // Deleting admin profiles is not allowed
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isNewOwner(userId) {
        return request.auth.uid == userId && request.resource.data.id == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}