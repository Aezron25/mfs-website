/**
 * @fileOverview Firestore Security Rules for Mwanakombo Financial Services.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for client profiles and messages, with role-based access control for administrators. Data is segregated by user ID to ensure privacy and prevent unauthorized access.
 *
 * Data Structure:
 * - /client_profiles/{clientProfileId}: Stores individual client profiles, accessible only to the user with a matching UID.
 * - /client_profiles/{clientProfileId}/messages/{messageId}: Stores messages sent by clients, with the `clientProfileId` denormalized for authorization.
 * - /roles_admin/{adminProfileId}:  Admin profiles; document existence grants admin privileges.
 *
 * Key Security Decisions:
 * - Clients can only access their own profile data and messages.
 * - Listing all client profiles is disallowed.
 * - Admin privileges are granted by the existence of a document in the `/roles_admin/{adminProfileId}` collection, matching the user's UID.
 *
 * Denormalization for Authorization:
 * - The `messages` subcollection includes the `clientProfileId` within each message.  This eliminates the need for `get()` calls to the parent `client_profiles` document and allows for simple rules that directly verify ownership.
 *
 * Structural Segregation:
 * - Client messages are stored in a subcollection under their profile (`/client_profiles/{clientProfileId}/messages/{messageId}`). This enables secure `list` operations by filtering messages based on the authenticated user's UID.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects client profile data, ensuring only the owner can read and write.
     * @path /client_profiles/{clientProfileId}
     * @allow (create) User with UID 'user_abc' can create their profile at /client_profiles/user_abc.
     * @allow (get,update,delete) User with UID 'user_abc' can read/update/delete their profile at /client_profiles/user_abc.
     * @deny (create) User with UID 'user_xyz' cannot create a profile at /client_profiles/user_abc.
     * @deny (get,update,delete) User with UID 'user_xyz' cannot read/update/delete the profile at /client_profiles/user_abc.
     * @principle Enforces document ownership; only the owner (matching UID) can modify their profile.
     */
    match /client_profiles/{clientProfileId} {
      //Utility function:  Checks if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      //Utility function:  Checks if the user id in the request matches the clientProfileId
      function isOwner(clientProfileId) {
        return request.auth.uid == clientProfileId;
      }

      //Utility function:  Checks if the user id in the request matches the clientProfileId, and checks that the resource already exists
      function isExistingOwner(clientProfileId) {
        return isOwner(clientProfileId) && exists(/databases/$(database)/documents/client_profiles/$(clientProfileId));
      }

      allow get: if isOwner(clientProfileId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(clientProfileId);
      allow update: if isExistingOwner(clientProfileId);
      allow delete: if isExistingOwner(clientProfileId);
    }

    /**
     * @description Controls access to messages sent by clients, ensuring only the owner can read and write.
     * @path /client_profiles/{clientProfileId}/messages/{messageId}
     * @allow (create) User with UID 'user_abc' can create a message under /client_profiles/user_abc/messages/{messageId}
     * @allow (get,update,delete) User with UID 'user_abc' can read/update/delete a message under /client_profiles/user_abc/messages/{messageId}
     * @deny (create) User with UID 'user_xyz' cannot create a message under /client_profiles/user_abc/messages/{messageId}.
     * @deny (get,update,delete) User with UID 'user_xyz' cannot read/update/delete a message under /client_profiles/user_abc/messages/{messageId}.
     * @principle Enforces document ownership and prevents unauthorized message manipulation.
     */
    match /client_profiles/{clientProfileId}/messages/{messageId} {
      //Utility function:  Checks if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      //Utility function:  Checks if the user id in the request matches the clientProfileId
      function isOwner(clientProfileId) {
        return request.auth.uid == clientProfileId;
      }

      //Utility function:  Checks if the user id in the request matches the clientProfileId, and checks that the resource already exists
      function isExistingOwner(clientProfileId) {
        return isOwner(clientProfileId) && exists(/databases/$(database)/documents/client_profiles/$(clientProfileId));
      }

      allow get: if isOwner(clientProfileId);
      allow list: if isOwner(clientProfileId);
      allow create: if isSignedIn() && isOwner(clientProfileId);
      allow update: if isExistingOwner(clientProfileId);
      allow delete: if isExistingOwner(clientProfileId);
    }

    /**
     * @description Manages admin profiles, granting admin privileges based on document existence.
     * @path /roles_admin/{adminProfileId}
     * @allow (get,list,create,update,delete) Any authenticated user can create, read, update and delete their respective admin profile under /roles_admin/{adminProfileId}.
     * @deny (create) User with UID 'user_xyz' cannot create an admin profile at /roles_admin/user_abc.
     * @principle Role-based access control; admin privileges are dynamically granted based on the existence of a profile.
     */
    match /roles_admin/{adminProfileId} {
      //Utility function:  Checks if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      //Utility function:  Checks if the user id in the request matches the adminProfileId
      function isOwner(adminProfileId) {
        return request.auth.uid == adminProfileId;
      }

      //Utility function:  Checks if the user id in the request matches the adminProfileId, and checks that the resource already exists
      function isExistingOwner(adminProfileId) {
        return isOwner(adminProfileId) && exists(/databases/$(database)/documents/roles_admin/$(adminProfileId));
      }

      allow get: if isOwner(adminProfileId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(adminProfileId);
      allow update: if isExistingOwner(adminProfileId);
      allow delete: if isExistingOwner(adminProfileId);
    }
  }
}