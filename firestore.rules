/**
 * @description This ruleset enforces a strict user-ownership model for client profiles and their associated messages.
 *   It also implements role-based access control for administrators using document existence.
 * @dataStructure
 *   /client_profiles/{clientProfileId}: Stores client profile data, accessible only to the owner.
 *   /client_profiles/{clientProfileId}/messages/{messageId}: Stores messages sent by the client.
 *   /roles_admin/{adminProfileId}: Presence of a document indicates admin role.
 * @keySecurityDecisions
 *   - Client profiles are strictly owned by the authenticated user with a matching UID.
 *   - Messages are stored in a subcollection of the client profile and include a denormalized `clientProfileId` for authorization independence.
 *   - Admin privileges are granted based on the existence of a document in the `/roles_admin/{adminProfileId}` collection.
 *   - Listing all client profiles is disallowed.
 * @denormalizationForAuthorization
 *   Messages include the `clientProfileId` to avoid `get()` calls to the parent `client_profiles` document for authorization.
 * @structuralSegregation
 *   Admin roles are managed through a separate collection (/roles_admin/{uid}) based on document existence to avoid custom claims and simplify security rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces client profile ownership. Only the authenticated user with a matching UID can access their profile.
     * @path /client_profiles/{clientProfileId}
     * @allow (get) User with UID "user_abc" can get their own profile at /client_profiles/user_abc.
     * @allow (create) User with UID "user_abc" can create their own profile at /client_profiles/user_abc if the document's id field matches their UID.
     * @allow (update) User with UID "user_abc" can update their own profile at /client_profiles/user_abc.
     * @allow (delete) User with UID "user_abc" can delete their own profile at /client_profiles/user_abc.
     * @deny (get) User with UID "user_xyz" cannot get the profile of user "user_abc" at /client_profiles/user_abc.
     * @deny (create) User with UID "user_xyz" cannot create a profile for user "user_abc" at /client_profiles/user_abc.
     * @deny (update) User with UID "user_xyz" cannot update the profile of user "user_abc" at /client_profiles/user_abc.
     * @deny (delete) User with UID "user_xyz" cannot delete the profile of user "user_abc" at /client_profiles/user_abc.
     * @principle Enforces document ownership for all operations.
     */
    match /client_profiles/{clientProfileId} {
      // Helpers
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(clientProfileId) {
        return isSignedIn() && request.auth.uid == clientProfileId;
      }
      function isExistingOwner(clientProfileId) {
        return isOwner(clientProfileId) && resource != null;
      }

      // Read Rules
      allow get: if isOwner(clientProfileId);
      allow list: if false; // Listing all client profiles is not permitted

      // Write Rules
      allow create: if isOwner(clientProfileId) && request.resource.data.id == clientProfileId;
      allow update: if isExistingOwner(clientProfileId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(clientProfileId);
    }

    /**
     * @description Enforces message ownership within a client profile. Only the owner of the profile can create, read, update, or delete messages.
     * @path /client_profiles/{clientProfileId}/messages/{messageId}
     * @allow (get) User with UID "user_abc" can get their own message at /client_profiles/user_abc/messages/message_123.
     * @allow (create) User with UID "user_abc" can create a message under their profile at /client_profiles/user_abc/messages/message_123 if clientProfileId matches.
     * @allow (update) User with UID "user_abc" can update their own message at /client_profiles/user_abc/messages/message_123.
     * @allow (delete) User with UID "user_abc" can delete their own message at /client_profiles/user_abc/messages/message_123.
     * @deny (get) User with UID "user_xyz" cannot get the message of user "user_abc" at /client_profiles/user_abc/messages/message_123.
     * @deny (create) User with UID "user_xyz" cannot create a message for user "user_abc" at /client_profiles/user_abc/messages/message_123.
     * @deny (update) User with UID "user_xyz" cannot update the message of user "user_abc" at /client_profiles/user_abc/messages/message_123.
     * @deny (delete) User with UID "user_xyz" cannot delete the message of user "user_abc" at /client_profiles/user_abc/messages/message_123.
     * @principle Enforces document ownership and authorization independence using denormalized `clientProfileId`.
     */
    match /client_profiles/{clientProfileId}/messages/{messageId} {
      // Helpers
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(clientProfileId) {
        return isSignedIn() && request.auth.uid == clientProfileId;
      }
      function isExistingOwner(clientProfileId) {
        return isOwner(clientProfileId) && resource != null;
      }

      // Read Rules
      allow get: if isOwner(clientProfileId);
      allow list: if isOwner(clientProfileId);

      // Write Rules
      allow create: if isOwner(clientProfileId) && request.resource.data.clientProfileId == clientProfileId;
      allow update: if isExistingOwner(clientProfileId);
      allow delete: if isExistingOwner(clientProfileId);
    }

    /**
     * @description Grants admin privileges based on the existence of a document in this collection.
     * @path /roles_admin/{adminProfileId}
     * @allow (get) Any authenticated user can check for the existence of an admin profile.
     * @allow (create) Only an existing admin (determined through a separate mechanism, e.g., Cloud Function) can create an admin profile.
     * @allow (update) Only an existing admin (determined through a separate mechanism, e.g., Cloud Function) can update an admin profile.
     * @allow (delete) Only an existing admin (determined through a separate mechanism, e.g., Cloud Function) can delete an admin profile.
     * @deny (create) A non-admin user cannot create an admin profile.
     * @deny (update) A non-admin user cannot update an admin profile.
     * @deny (delete) A non-admin user cannot delete an admin profile.
     * @principle Implements role-based access control via document existence.
     */
    match /roles_admin/{adminProfileId} {
      // Helpers
      function isSignedIn() {
        return request.auth != null;
      }
      function isAdmin() {
          return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
      }

      // Read Rules
      allow get: if isSignedIn(); // Any signed-in user can check if an admin profile exists for a given UID.
      allow list: if false; // No need to list all admins.

      // Write Rules
      allow create: if isAdmin(); // Only existing admins can create new admin profiles.
      allow update: if isAdmin() && resource != null; // Only existing admins can update admin profiles, and only if the document exists.
      allow delete: if isAdmin() && resource != null; // Only existing admins can delete admin profiles, and only if the document exists.
    }
  }
}