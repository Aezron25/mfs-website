/**
 * @file Firestore Security Rules for Mwanakombo Financial Services.
 *
 * @corePhilosophy This ruleset enforces a strict user-ownership model for client profiles and their messages,
 *                  and uses document existence in a specific collection to grant admin privileges.
 * @dataStructure - Client profiles are stored under `/client_profiles/{clientProfileId}`.
 *                - Messages from clients are stored under `/client_profiles/{clientProfileId}/messages/{messageId}`.
 *                - Admin profiles are stored under `/roles_admin/{adminProfileId}`.
 * @keySecurityDecisions - Clients can only access their own profile data and messages.
 *                         - Admin privileges are granted by the presence of a document in `/roles_admin/{adminProfileId}`.
 *                         - Listing all client profiles is disallowed.
 *                         - Listing admin profiles is disallowed.
 * @denormalizationForAuthorization - The `clientProfileId` is denormalized within each message to enable
 *                                    authorization independence and efficient security rules.
 * @structuralSegregation - Admin roles are managed via document existence in a dedicated collection,
 *                          clearly separating concerns from user profiles and avoiding complex role lookups.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures client profile data, allowing only the owner to read and write.
     * @path /client_profiles/{clientProfileId}
     * @allow (get, update, delete) Authenticated user with UID matching `clientProfileId`.
     * @allow (create) Authenticated user with UID matching `clientProfileId` creating their own profile.
     * @deny (get, update, delete) Authenticated user with UID not matching `clientProfileId`.
     * @deny (create) Authenticated user with UID not matching `clientProfileId` attempting to create a profile.
     * @principle Enforces document ownership for all operations on client profiles.
     */
    match /client_profiles/{clientProfileId} {
      // Helper function to check if the user is signed in and owns the client profile.
      function isOwner(clientProfileId) {
        return request.auth != null && request.auth.uid == clientProfileId;
      }

      // Allow read access (get) if the user is the owner.
      allow get: if isOwner(clientProfileId);

      // Disallow listing client profiles.
      allow list: if false;

      // Allow creation if the user is the owner and the ID matches.
      allow create: if isOwner(clientProfileId) && request.resource.data.id == clientProfileId;

      // Allow updates and deletes if the user is the owner and the document exists. Enforce immutability of 'id'.
      allow update: if isExistingOwner(clientProfileId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(clientProfileId);

      // Helper function for update and delete operations to ensure the document exists and is owned.
      function isExistingOwner(clientProfileId) {
        return isOwner(clientProfileId) && resource != null;
      }
    }

    /**
     * @description Secures messages sent by clients, allowing only the owner to manage them.
     * @path /client_profiles/{clientProfileId}/messages/{messageId}
     * @allow (get, list, create, update, delete) Authenticated user with UID matching the `clientProfileId` of the message.
     * @deny (get, list, create, update, delete) Authenticated user with UID not matching the `clientProfileId` of the message.
     * @principle Enforces document ownership for all operations on client messages.
     */
    match /client_profiles/{clientProfileId}/messages/{messageId} {
      // Helper function to check if the user is signed in and owns the client profile.
      function isOwner(clientProfileId) {
        return request.auth != null && request.auth.uid == clientProfileId;
      }

      // Allow read access (get, list) if the user is the owner.
      allow get, list: if isOwner(clientProfileId);

      // Allow creation if the user is the owner and the clientProfileId matches.
      allow create: if isOwner(clientProfileId) && request.resource.data.clientProfileId == clientProfileId;

      // Allow updates and deletes if the user is the owner and the document exists. clientProfileId is immutable.
      allow update: if isExistingOwner(clientProfileId) && request.resource.data.clientProfileId == resource.data.clientProfileId;
      allow delete: if isExistingOwner(clientProfileId);

      // Helper function for update and delete operations to ensure the document exists and is owned.
      function isExistingOwner(clientProfileId) {
        return isOwner(clientProfileId) && resource != null;
      }
    }

    /**
     * @description Manages admin profiles; existence of a document grants admin privileges.
     * @path /roles_admin/{adminProfileId}
     * @allow (get) Any authenticated user can check for the existence of an admin profile (to determine admin status).
     * @allow (create, update, delete) Only an existing admin can create, update, or delete admin profiles.
     * @deny (create, update, delete) Non-admins cannot create, update, or delete admin profiles.
     * @principle Role-based access control is implemented via document existence.
     */
    match /roles_admin/{adminProfileId} {
        // Helper function to check if the user is signed in
        function isSignedIn() {
          return request.auth != null;
        }

        //Helper function to check if the user is an existing admin
        function isAdmin(){
            return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
        }

        //Anyone signed in can check if an admin account exists
        allow get: if isSignedIn();

        // Listing admin profiles is disallowed.
        allow list: if false;

        //Only admins can create new admins
        allow create: if isAdmin();

        //Only admins can update existing admins
        allow update: if isAdmin();

        //Only admins can delete existing admins
        allow delete: if isAdmin();
    }
  }
}