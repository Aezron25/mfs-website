/**
 * @fileOverview Firestore Security Rules for Mwanakombo Financial Services.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for client profiles and their messages.
 * Administrative privileges are granted based on the existence of an admin profile document.
 *
 * Data Structure:
 * - /client_profiles/{clientProfileId}: Stores client profile data. The {clientProfileId} must match the user's UID.
 * - /client_profiles/{clientProfileId}/messages/{messageId}: Stores messages sent by clients. Each message includes a denormalized `clientProfileId` field.
 * - /roles_admin/{adminProfileId}: Admin profiles. The existence of a document grants admin privileges.
 *
 * Key Security Decisions:
 * - Clients can only access their own profile data.
 * - Clients can only create, read, update, or delete their own messages.
 * - Listing client profiles is denied to prevent unauthorized data access.
 * - Admin privileges are determined by the existence of a document in the `/roles_admin` collection.
 *
 * Denormalization for Authorization:
 * The `messages` subcollection includes the `clientProfileId`, eliminating the need for `get()` calls to the parent `client_profiles` document. This allows security rules to directly verify ownership based on `request.auth.uid` and the `clientProfileId` within the message.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows clients to manage their own profile.
     * @path /client_profiles/{clientProfileId}
     * @allow (create) User with UID 'user_abc' can create a profile if clientProfileId == 'user_abc'.
     * @allow (get, update, delete) User with UID 'user_abc' can read, update, or delete their profile (clientProfileId == 'user_abc').
     * @deny (create, get, update, delete) User with UID 'user_xyz' cannot access profile 'user_abc'.
     * @deny (list) No one can list client profiles.
     * @principle Enforces document ownership for writes and reads. Restricts listing of user profiles.
     */
    match /client_profiles/{clientProfileId} {
      // Verified Identity
      function isSignedIn() {
        return request.auth != null;
      }

      // Ownership
      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow create: if isOwner(clientProfileId) && request.resource.data.id == clientProfileId;
      allow get: if isOwner(clientProfileId);
      allow update: if isExistingOwner(clientProfileId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(clientProfileId);
      allow list: if false;
    }

    /**
     * @description Allows clients to manage their own messages.
     * @path /client_profiles/{clientProfileId}/messages/{messageId}
     * @allow (create) User with UID 'user_abc' can create a message under their profile if clientProfileId == 'user_abc'.
     * @allow (get, list, update, delete) User with UID 'user_abc' can read, list, update, or delete messages under their profile (clientProfileId == 'user_abc').
     * @deny (create, get, list, update, delete) User with UID 'user_xyz' cannot access messages under profile 'user_abc'.
     * @principle Enforces document ownership for all operations on messages.
     */
    match /client_profiles/{clientProfileId}/messages/{messageId} {
      // Verified Identity
      function isSignedIn() {
        return request.auth != null;
      }

      // Ownership
      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow create: if isOwner(clientProfileId) && request.resource.data.clientProfileId == clientProfileId;
      allow get: if isOwner(clientProfileId);
      allow list: if isOwner(clientProfileId);
      allow update: if isExistingOwner(clientProfileId) && request.resource.data.clientProfileId == resource.data.clientProfileId;
      allow delete: if isExistingOwner(clientProfileId);
    }

    /**
     * @description Grants admin privileges based on document existence.
     * @path /roles_admin/{adminProfileId}
     * @allow (create) User with UID 'admin_abc' can create an admin profile for themselves if adminProfileId == 'admin_abc'.
     * @allow (get, update, delete) User with UID 'admin_abc' can read, update, or delete their admin profile (adminProfileId == 'admin_abc').
     * @allow (list) Anyone can list admin profiles.
     * @deny (create, get, update, delete) User with UID 'user_xyz' cannot create, get, update, or delete admin profile 'admin_abc'.
     * @principle Grants admin privileges through document existence.
     */
    match /roles_admin/{adminProfileId} {
      // Verified Identity
      function isSignedIn() {
        return request.auth != null;
      }

      // Ownership
      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow create: if isOwner(adminProfileId) && request.resource.data.id == adminProfileId;
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow update: if isExistingOwner(adminProfileId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(adminProfileId);
    }
  }
}